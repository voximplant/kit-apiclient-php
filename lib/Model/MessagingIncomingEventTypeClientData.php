<?php
/**
 * MessagingIncomingEventTypeClientData
 *
 * PHP version 5
 *
 * @category Class
 * @package  VoximplantKit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant Kit API Documentation
 *
 * <h1>Basic description</h1> <p>HTTP API is available via the <u>https://kitapi-{{region}}.voximplant.com/api/v3/<b>{method}</b></u> endpoint. To use the methods marked with the LOCK symbol, you need to create an api token on api tokens page. Pass this token as access token to each HTTP API call.</p> <h1>Authentication</h1> <p>This API uses Custom Query Parameter for its authentication.</p> <p>The parameters that are needed to be sent for this type of authentication are as follows:</p> <ul>   <li><strong>access_token</strong></li>   <li><strong>domain</strong></li> </ul>
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoximplantKit\Model;

use \ArrayAccess;
use VoximplantKit\ObjectSerializer;

/**
 * MessagingIncomingEventTypeClientData Class Doc Comment
 *
 * @category Class
 * @package  VoximplantKit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessagingIncomingEventTypeClientData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MessagingIncomingEventType_client_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id' => 'string',
        'client_phone' => 'string',
        'client_avatar' => 'string',
        'client_display_name' => 'string',
        'client_email' => 'string',
        'client_language' => 'string',
        'utm' => '\VoximplantKit\Model\MessagingIncomingEventClientDataUtmType',
        'page' => '\VoximplantKit\Model\MessagingIncomingEventClientDataPageType',
        'location' => '\VoximplantKit\Model\MessagingIncomingEventClientDataLocationType',
        'device' => '\VoximplantKit\Model\MessagingIncomingEventClientDataDeviceType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_id' => null,
        'client_phone' => null,
        'client_avatar' => null,
        'client_display_name' => null,
        'client_email' => null,
        'client_language' => null,
        'utm' => null,
        'page' => null,
        'location' => null,
        'device' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'client_id',
        'client_phone' => 'client_phone',
        'client_avatar' => 'client_avatar',
        'client_display_name' => 'client_display_name',
        'client_email' => 'client_email',
        'client_language' => 'client_language',
        'utm' => 'utm',
        'page' => 'page',
        'location' => 'location',
        'device' => 'device'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'client_phone' => 'setClientPhone',
        'client_avatar' => 'setClientAvatar',
        'client_display_name' => 'setClientDisplayName',
        'client_email' => 'setClientEmail',
        'client_language' => 'setClientLanguage',
        'utm' => 'setUtm',
        'page' => 'setPage',
        'location' => 'setLocation',
        'device' => 'setDevice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'client_phone' => 'getClientPhone',
        'client_avatar' => 'getClientAvatar',
        'client_display_name' => 'getClientDisplayName',
        'client_email' => 'getClientEmail',
        'client_language' => 'getClientLanguage',
        'utm' => 'getUtm',
        'page' => 'getPage',
        'location' => 'getLocation',
        'device' => 'getDevice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_phone'] = isset($data['client_phone']) ? $data['client_phone'] : null;
        $this->container['client_avatar'] = isset($data['client_avatar']) ? $data['client_avatar'] : null;
        $this->container['client_display_name'] = isset($data['client_display_name']) ? $data['client_display_name'] : null;
        $this->container['client_email'] = isset($data['client_email']) ? $data['client_email'] : null;
        $this->container['client_language'] = isset($data['client_language']) ? $data['client_language'] : null;
        $this->container['utm'] = isset($data['utm']) ? $data['utm'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_phone
     *
     * @return string
     */
    public function getClientPhone()
    {
        return $this->container['client_phone'];
    }

    /**
     * Sets client_phone
     *
     * @param string $client_phone client_phone
     *
     * @return $this
     */
    public function setClientPhone($client_phone)
    {
        $this->container['client_phone'] = $client_phone;

        return $this;
    }

    /**
     * Gets client_avatar
     *
     * @return string
     */
    public function getClientAvatar()
    {
        return $this->container['client_avatar'];
    }

    /**
     * Sets client_avatar
     *
     * @param string $client_avatar client_avatar
     *
     * @return $this
     */
    public function setClientAvatar($client_avatar)
    {
        $this->container['client_avatar'] = $client_avatar;

        return $this;
    }

    /**
     * Gets client_display_name
     *
     * @return string
     */
    public function getClientDisplayName()
    {
        return $this->container['client_display_name'];
    }

    /**
     * Sets client_display_name
     *
     * @param string $client_display_name client_display_name
     *
     * @return $this
     */
    public function setClientDisplayName($client_display_name)
    {
        $this->container['client_display_name'] = $client_display_name;

        return $this;
    }

    /**
     * Gets client_email
     *
     * @return string
     */
    public function getClientEmail()
    {
        return $this->container['client_email'];
    }

    /**
     * Sets client_email
     *
     * @param string $client_email client_email
     *
     * @return $this
     */
    public function setClientEmail($client_email)
    {
        $this->container['client_email'] = $client_email;

        return $this;
    }

    /**
     * Gets client_language
     *
     * @return string
     */
    public function getClientLanguage()
    {
        return $this->container['client_language'];
    }

    /**
     * Sets client_language
     *
     * @param string $client_language client_language
     *
     * @return $this
     */
    public function setClientLanguage($client_language)
    {
        $this->container['client_language'] = $client_language;

        return $this;
    }

    /**
     * Gets utm
     *
     * @return \VoximplantKit\Model\MessagingIncomingEventClientDataUtmType
     */
    public function getUtm()
    {
        return $this->container['utm'];
    }

    /**
     * Sets utm
     *
     * @param \VoximplantKit\Model\MessagingIncomingEventClientDataUtmType $utm utm
     *
     * @return $this
     */
    public function setUtm($utm)
    {
        $this->container['utm'] = $utm;

        return $this;
    }

    /**
     * Gets page
     *
     * @return \VoximplantKit\Model\MessagingIncomingEventClientDataPageType
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param \VoximplantKit\Model\MessagingIncomingEventClientDataPageType $page page
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \VoximplantKit\Model\MessagingIncomingEventClientDataLocationType
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \VoximplantKit\Model\MessagingIncomingEventClientDataLocationType $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \VoximplantKit\Model\MessagingIncomingEventClientDataDeviceType
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \VoximplantKit\Model\MessagingIncomingEventClientDataDeviceType $device device
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


