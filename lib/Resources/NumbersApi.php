<?php
/**
 * NumbersApi
 * PHP version 5
 *
 * @category Class
 * @package  VoximplantKit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant Kit API Documentation
 *
 * <h1>Basic description</h1> <p>HTTP API is available via the <u>https://kitapi-{{region}}.voximplant.com/api/v3/<b>{method}</b></u> endpoint. To use the methods marked with the LOCK symbol, you need to create an api token on api tokens page. Pass this token as access token to each HTTP API call.</p> <h1>Authentication</h1> <p>This API uses Custom Query Parameter for its authentication.</p> <p>The parameters that are needed to be sent for this type of authentication are as follows:</p> <ul>   <li><strong>access_token</strong></li>   <li><strong>domain</strong></li> </ul>
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoximplantKit\Resources;

use GuzzleHttp\Psr7\MultipartStream;
use VoximplantKit\VoximplantKitClient;
use VoximplantKit\VoximplantKitRequest;
use VoximplantKit\ObjectSerializer;

/**
 * NumbersApi Class Doc Comment
 *
 * @category Class
 * @package  VoximplantKit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NumbersApi
{
    /**
     * @var VoximplantKitClient
     */
    protected $client;

    /**
     * @param VoximplantKitClient $client
     */
    public function __construct(VoximplantKitClient $client) {
        $this->client = $client;
    }

    /**
     * Operation searchCallerIDs
     *
     * @param  int $id Caller ID. The ID can be retrieved via the **searchCallersIDs** method (optional)
     * @param  string $caller_number Number of the caller (optional)
     * @param  int $active Set &#39;1&#39; if the caller is active (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’, etc). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\SearchCallerIDsResponseType
     */
    public function searchCallerIDs($id = null, $caller_number = null, $active = null, $sort = null)
    {
        $request = $this->searchCallerIDsRequest($id, $caller_number, $active, $sort);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation searchCallerIDsAsync
     *
     * 
     *
     * @param  int $id Caller ID. The ID can be retrieved via the **searchCallersIDs** method (optional)
     * @param  string $caller_number Number of the caller (optional)
     * @param  int $active Set &#39;1&#39; if the caller is active (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’, etc). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCallerIDsAsync($id = null, $caller_number = null, $active = null, $sort = null)
    {
        $request = $this->searchCallerIDsRequest($id, $caller_number, $active, $sort);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'searchCallerIDs'
     *
     * @param  int $id Caller ID. The ID can be retrieved via the **searchCallersIDs** method (optional)
     * @param  string $caller_number Number of the caller (optional)
     * @param  int $active Set &#39;1&#39; if the caller is active (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’, etc). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function searchCallerIDsRequest($id = null, $caller_number = null, $active = null, $sort = null)
    {

        $resourcePath = '/callerid/searchCallerIDs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($caller_number !== null) {
            $queryParams['caller_number'] = ObjectSerializer::toQueryValue($caller_number);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'GET',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\SearchCallerIDsResponseType');
        return $request;
    }
    /**
     * Operation searchNumbers
     *
     * @param  int $id Phone number ID. The ID can be retrieved via the **searchNumbers** method (optional)
     * @param  int $with_campaigns Set &#39;1&#39; to include campaigns in the search results (optional)
     * @param  int $with_scenarios Set &#39;1&#39; to include scenarios in the search results (optional)
     * @param  int $can_be_used Set &#39;1&#39; if the phone number can be used (optional)
     * @param  string $phone_number Phone number to search for. (optional)
     * @param  string $phone_country_code Phone country code (2 symbols) (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’, etc). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\SearchNumbersResponseType
     */
    public function searchNumbers($id = null, $with_campaigns = null, $with_scenarios = null, $can_be_used = null, $phone_number = null, $phone_country_code = null, $sort = null)
    {
        $request = $this->searchNumbersRequest($id, $with_campaigns, $with_scenarios, $can_be_used, $phone_number, $phone_country_code, $sort);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation searchNumbersAsync
     *
     * 
     *
     * @param  int $id Phone number ID. The ID can be retrieved via the **searchNumbers** method (optional)
     * @param  int $with_campaigns Set &#39;1&#39; to include campaigns in the search results (optional)
     * @param  int $with_scenarios Set &#39;1&#39; to include scenarios in the search results (optional)
     * @param  int $can_be_used Set &#39;1&#39; if the phone number can be used (optional)
     * @param  string $phone_number Phone number to search for. (optional)
     * @param  string $phone_country_code Phone country code (2 symbols) (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’, etc). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchNumbersAsync($id = null, $with_campaigns = null, $with_scenarios = null, $can_be_used = null, $phone_number = null, $phone_country_code = null, $sort = null)
    {
        $request = $this->searchNumbersRequest($id, $with_campaigns, $with_scenarios, $can_be_used, $phone_number, $phone_country_code, $sort);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'searchNumbers'
     *
     * @param  int $id Phone number ID. The ID can be retrieved via the **searchNumbers** method (optional)
     * @param  int $with_campaigns Set &#39;1&#39; to include campaigns in the search results (optional)
     * @param  int $with_scenarios Set &#39;1&#39; to include scenarios in the search results (optional)
     * @param  int $can_be_used Set &#39;1&#39; if the phone number can be used (optional)
     * @param  string $phone_number Phone number to search for. (optional)
     * @param  string $phone_country_code Phone country code (2 symbols) (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’, etc). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function searchNumbersRequest($id = null, $with_campaigns = null, $with_scenarios = null, $can_be_used = null, $phone_number = null, $phone_country_code = null, $sort = null)
    {

        $resourcePath = '/phone/searchNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($with_campaigns !== null) {
            $queryParams['with_campaigns'] = ObjectSerializer::toQueryValue($with_campaigns);
        }
        // query params
        if ($with_scenarios !== null) {
            $queryParams['with_scenarios'] = ObjectSerializer::toQueryValue($with_scenarios);
        }
        // query params
        if ($can_be_used !== null) {
            $queryParams['can_be_used'] = ObjectSerializer::toQueryValue($can_be_used);
        }
        // query params
        if ($phone_number !== null) {
            $queryParams['phone_number'] = ObjectSerializer::toQueryValue($phone_number);
        }
        // query params
        if ($phone_country_code !== null) {
            $queryParams['phone_country_code'] = ObjectSerializer::toQueryValue($phone_country_code);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'GET',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\SearchNumbersResponseType');
        return $request;
    }
}
