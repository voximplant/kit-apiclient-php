<?php
/**
 * ScenariosApi
 * PHP version 5
 *
 * @category Class
 * @package  VoximplantKit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant Kit API Documentation
 *
 * <h1>Basic description</h1> <p>HTTP API is available via the <u>https://kitapi-{{region}}.voximplant.com/api/v3/<b>{method}</b></u> endpoint. To use the methods marked with the LOCK symbol, you need to create an api token on api tokens page. Pass this token as access token to each HTTP API call.</p> <h1>Authentication</h1> <p>This API uses Custom Query Parameter for its authentication.</p> <p>The parameters that are needed to be sent for this type of authentication are as follows:</p> <ul>   <li><strong>access_token</strong></li>   <li><strong>domain</strong></li> </ul>
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoximplantKit\Resources;

use GuzzleHttp\Psr7\MultipartStream;
use VoximplantKit\VoximplantKitClient;
use VoximplantKit\VoximplantKitRequest;
use VoximplantKit\ObjectSerializer;

/**
 * ScenariosApi Class Doc Comment
 *
 * @category Class
 * @package  VoximplantKit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScenariosApi
{
    /**
     * @var VoximplantKitClient
     */
    protected $client;

    /**
     * @param VoximplantKitClient $client
     */
    public function __construct(VoximplantKitClient $client) {
        $this->client = $client;
    }

    /**
     * Operation getScenarioVariables
     *
     * @param  int $scenario_id scenario_id (optional)
     * @param  bool $required_only required_only (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\GetScenarioVariablesResponseType
     */
    public function getScenarioVariables($scenario_id = null, $required_only = null)
    {
        $request = $this->getScenarioVariablesRequest($scenario_id, $required_only);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation getScenarioVariablesAsync
     *
     * 
     *
     * @param  int $scenario_id (optional)
     * @param  bool $required_only (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScenarioVariablesAsync($scenario_id = null, $required_only = null)
    {
        $request = $this->getScenarioVariablesRequest($scenario_id, $required_only);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'getScenarioVariables'
     *
     * @param  int $scenario_id (optional)
     * @param  bool $required_only (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function getScenarioVariablesRequest($scenario_id = null, $required_only = null)
    {

        $resourcePath = '/scenario/getScenarioVariables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($scenario_id !== null) {
            $formParams['scenario_id'] = ObjectSerializer::toFormValue($scenario_id);
        }
        // form params
        if ($required_only !== null) {
            $formParams['required_only'] = ObjectSerializer::toFormValue($required_only);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\GetScenarioVariablesResponseType');
        return $request;
    }
    /**
     * Operation runScenario
     *
     * @param  int $scenario_id scenario_id (required)
     * @param  string $phone phone (required)
     * @param  string $variables variables (required)
     * @param  string $caller_id caller_id (required)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\InlineResponse200
     */
    public function runScenario($scenario_id, $phone, $variables, $caller_id)
    {
        $request = $this->runScenarioRequest($scenario_id, $phone, $variables, $caller_id);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation runScenarioAsync
     *
     * 
     *
     * @param  int $scenario_id (required)
     * @param  string $phone (required)
     * @param  string $variables (required)
     * @param  string $caller_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function runScenarioAsync($scenario_id, $phone, $variables, $caller_id)
    {
        $request = $this->runScenarioRequest($scenario_id, $phone, $variables, $caller_id);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'runScenario'
     *
     * @param  int $scenario_id (required)
     * @param  string $phone (required)
     * @param  string $variables (required)
     * @param  string $caller_id (required)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function runScenarioRequest($scenario_id, $phone, $variables, $caller_id)
    {
        // verify the required parameter 'scenario_id' is set
        if ($scenario_id === null || (is_array($scenario_id) && count($scenario_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scenario_id when calling runScenario'
            );
        }
        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling runScenario'
            );
        }
        // verify the required parameter 'variables' is set
        if ($variables === null || (is_array($variables) && count($variables) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variables when calling runScenario'
            );
        }
        // verify the required parameter 'caller_id' is set
        if ($caller_id === null || (is_array($caller_id) && count($caller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $caller_id when calling runScenario'
            );
        }

        $resourcePath = '/scenario/runScenario';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($scenario_id !== null) {
            $formParams['scenario_id'] = ObjectSerializer::toFormValue($scenario_id);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = ObjectSerializer::toFormValue($phone);
        }
        // form params
        if ($variables !== null) {
            $formParams['variables'] = ObjectSerializer::toFormValue($variables);
        }
        // form params
        if ($caller_id !== null) {
            $formParams['caller_id'] = ObjectSerializer::toFormValue($caller_id);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\InlineResponse200');
        return $request;
    }
    /**
     * Operation searchScenarios
     *
     * @param  int $id Scenario ID. The ID can be retrieved via the **searchScenarios** method (optional)
     * @param  int $folder_id ID of the scenario&#39;s folder (optional)
     * @param  int $scenario_type Scenario type to search for. (&lt;b&gt;example:&lt;/b&gt; scenario_type &#x3D; 1 — displays only outgoing call scenarios, scenario_type &#x3D; 2 — shows only incoming call scenarios) (optional)
     * @param  string $title Scenario title to search for (optional)
     * @param  int $with_campaigns Set &#39;1&#39; to include campaigns in the search results (optional)
     * @param  int $with_phones Set &#39;1&#39; to include phone numbers in the search results (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\SearchScenariosResponseType
     */
    public function searchScenarios($id = null, $folder_id = null, $scenario_type = null, $title = null, $with_campaigns = null, $with_phones = null, $sort = null, $page = null, $per_page = null)
    {
        $request = $this->searchScenariosRequest($id, $folder_id, $scenario_type, $title, $with_campaigns, $with_phones, $sort, $page, $per_page);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation searchScenariosAsync
     *
     * 
     *
     * @param  int $id Scenario ID. The ID can be retrieved via the **searchScenarios** method (optional)
     * @param  int $folder_id ID of the scenario&#39;s folder (optional)
     * @param  int $scenario_type Scenario type to search for. (&lt;b&gt;example:&lt;/b&gt; scenario_type &#x3D; 1 — displays only outgoing call scenarios, scenario_type &#x3D; 2 — shows only incoming call scenarios) (optional)
     * @param  string $title Scenario title to search for (optional)
     * @param  int $with_campaigns Set &#39;1&#39; to include campaigns in the search results (optional)
     * @param  int $with_phones Set &#39;1&#39; to include phone numbers in the search results (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchScenariosAsync($id = null, $folder_id = null, $scenario_type = null, $title = null, $with_campaigns = null, $with_phones = null, $sort = null, $page = null, $per_page = null)
    {
        $request = $this->searchScenariosRequest($id, $folder_id, $scenario_type, $title, $with_campaigns, $with_phones, $sort, $page, $per_page);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'searchScenarios'
     *
     * @param  int $id Scenario ID. The ID can be retrieved via the **searchScenarios** method (optional)
     * @param  int $folder_id ID of the scenario&#39;s folder (optional)
     * @param  int $scenario_type Scenario type to search for. (&lt;b&gt;example:&lt;/b&gt; scenario_type &#x3D; 1 — displays only outgoing call scenarios, scenario_type &#x3D; 2 — shows only incoming call scenarios) (optional)
     * @param  string $title Scenario title to search for (optional)
     * @param  int $with_campaigns Set &#39;1&#39; to include campaigns in the search results (optional)
     * @param  int $with_phones Set &#39;1&#39; to include phone numbers in the search results (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function searchScenariosRequest($id = null, $folder_id = null, $scenario_type = null, $title = null, $with_campaigns = null, $with_phones = null, $sort = null, $page = null, $per_page = null)
    {

        $resourcePath = '/scenario/searchScenarios';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($folder_id !== null) {
            $queryParams['folder_id'] = ObjectSerializer::toQueryValue($folder_id);
        }
        // query params
        if ($scenario_type !== null) {
            $queryParams['scenario_type'] = ObjectSerializer::toQueryValue($scenario_type);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($with_campaigns !== null) {
            $queryParams['with_campaigns'] = ObjectSerializer::toQueryValue($with_campaigns);
        }
        // query params
        if ($with_phones !== null) {
            $queryParams['with_phones'] = ObjectSerializer::toQueryValue($with_phones);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per-page'] = ObjectSerializer::toQueryValue($per_page);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'GET',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\SearchScenariosResponseType');
        return $request;
    }
}
