<?php
/**
 * CampaignsApi
 * PHP version 5
 *
 * @category Class
 * @package  VoximplantKit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant Kit API Documentation
 *
 * <h1>Basic description</h1> <p>HTTP API is available via the <u>https://kitapi-{{region}}.voximplant.com/api/v3/<b>{method}</b></u> endpoint. To use the methods marked with the LOCK symbol, you need to create an api token on api tokens page. Pass this token as access token to each HTTP API call.</p> <h1>Authentication</h1> <p>This API uses Custom Query Parameter for its authentication.</p> <p>The parameters that are needed to be sent for this type of authentication are as follows:</p> <ul>   <li><strong>access_token</strong></li>   <li><strong>domain</strong></li> </ul>
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoximplantKit\Resources;

use GuzzleHttp\Psr7\MultipartStream;
use VoximplantKit\VoximplantKitClient;
use VoximplantKit\VoximplantKitRequest;
use VoximplantKit\ObjectSerializer;

/**
 * CampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  VoximplantKit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignsApi
{
    /**
     * @var VoximplantKitClient
     */
    protected $client;

    /**
     * @param VoximplantKitClient $client
     */
    public function __construct(VoximplantKitClient $client) {
        $this->client = $client;
    }

    /**
     * Operation appendToCampaign
     *
     * @param  int $campaign_id campaign_id (optional)
     * @param  string $rows rows (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\AppendToCampaignResponseType
     */
    public function appendToCampaign($campaign_id = null, $rows = null)
    {
        $request = $this->appendToCampaignRequest($campaign_id, $rows);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation appendToCampaignAsync
     *
     * 
     *
     * @param  int $campaign_id (optional)
     * @param  string $rows (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appendToCampaignAsync($campaign_id = null, $rows = null)
    {
        $request = $this->appendToCampaignRequest($campaign_id, $rows);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'appendToCampaign'
     *
     * @param  int $campaign_id (optional)
     * @param  string $rows (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function appendToCampaignRequest($campaign_id = null, $rows = null)
    {

        $resourcePath = '/outbound/appendToCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($campaign_id !== null) {
            $formParams['campaign_id'] = ObjectSerializer::toFormValue($campaign_id);
        }
        // form params
        if ($rows !== null) {
            $formParams['rows'] = ObjectSerializer::toFormValue($rows);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\AppendToCampaignResponseType');
        return $request;
    }
    /**
     * Operation deleteCampaign
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (required)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\DeleteCampaignResponseType
     */
    public function deleteCampaign($id)
    {
        $request = $this->deleteCampaignRequest($id);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation deleteCampaignAsync
     *
     * 
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignAsync($id)
    {
        $request = $this->deleteCampaignRequest($id);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'deleteCampaign'
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (required)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function deleteCampaignRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCampaign'
            );
        }

        $resourcePath = '/outbound/deleteCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\DeleteCampaignResponseType');
        return $request;
    }
    /**
     * Operation downloadStatReport
     *
     * @param  int $report_id Report ID. The ID can be retrieved via the **exportStatReport** method (required)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function downloadStatReport($report_id)
    {
        $request = $this->downloadStatReportRequest($report_id);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation downloadStatReportAsync
     *
     * 
     *
     * @param  int $report_id Report ID. The ID can be retrieved via the **exportStatReport** method (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadStatReportAsync($report_id)
    {
        $request = $this->downloadStatReportRequest($report_id);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'downloadStatReport'
     *
     * @param  int $report_id Report ID. The ID can be retrieved via the **exportStatReport** method (required)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function downloadStatReportRequest($report_id)
    {
        // verify the required parameter 'report_id' is set
        if ($report_id === null || (is_array($report_id) && count($report_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_id when calling downloadStatReport'
            );
        }

        $resourcePath = '/attempt/downloadStatReport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($report_id !== null) {
            $queryParams['report_id'] = ObjectSerializer::toQueryValue($report_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'GET',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('string');
        return $request;
    }
    /**
     * Operation exportStatReport
     *
     * @param  int $campaign_id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (required)
     * @param  string $locale Document language (&lt;b&gt;example:&lt;/b&gt; &#39;en&#39; or &#39;ru&#39;) (required)
     * @param  string $format Report format. The following values are possible: csv, xlsx (optional)
     * @param  string $from Start date (&lt;b&gt;example:&lt;/b&gt; &#39;YYYY-MM-DD HH:mm:ss&#39;) (optional)
     * @param  string $to End date (&lt;b&gt;example:&lt;/b&gt; &#39;YYYY-MM-DD HH:mm:ss&#39;) (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\ExportStatReportResponseType
     */
    public function exportStatReport($campaign_id, $locale, $format = null, $from = null, $to = null)
    {
        $request = $this->exportStatReportRequest($campaign_id, $locale, $format, $from, $to);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation exportStatReportAsync
     *
     * 
     *
     * @param  int $campaign_id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (required)
     * @param  string $locale Document language (&lt;b&gt;example:&lt;/b&gt; &#39;en&#39; or &#39;ru&#39;) (required)
     * @param  string $format Report format. The following values are possible: csv, xlsx (optional)
     * @param  string $from Start date (&lt;b&gt;example:&lt;/b&gt; &#39;YYYY-MM-DD HH:mm:ss&#39;) (optional)
     * @param  string $to End date (&lt;b&gt;example:&lt;/b&gt; &#39;YYYY-MM-DD HH:mm:ss&#39;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportStatReportAsync($campaign_id, $locale, $format = null, $from = null, $to = null)
    {
        $request = $this->exportStatReportRequest($campaign_id, $locale, $format, $from, $to);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'exportStatReport'
     *
     * @param  int $campaign_id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (required)
     * @param  string $locale Document language (&lt;b&gt;example:&lt;/b&gt; &#39;en&#39; or &#39;ru&#39;) (required)
     * @param  string $format Report format. The following values are possible: csv, xlsx (optional)
     * @param  string $from Start date (&lt;b&gt;example:&lt;/b&gt; &#39;YYYY-MM-DD HH:mm:ss&#39;) (optional)
     * @param  string $to End date (&lt;b&gt;example:&lt;/b&gt; &#39;YYYY-MM-DD HH:mm:ss&#39;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function exportStatReportRequest($campaign_id, $locale, $format = null, $from = null, $to = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling exportStatReport'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling exportStatReport'
            );
        }

        $resourcePath = '/attempt/exportStatReport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\ExportStatReportResponseType');
        return $request;
    }
    /**
     * Operation getStatReportStatus
     *
     * @param  int $report_id Report ID. The ID can be retrieved via the **exportStatReport** method (required)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\GetStatReportStatusResponseType
     */
    public function getStatReportStatus($report_id)
    {
        $request = $this->getStatReportStatusRequest($report_id);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation getStatReportStatusAsync
     *
     * 
     *
     * @param  int $report_id Report ID. The ID can be retrieved via the **exportStatReport** method (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatReportStatusAsync($report_id)
    {
        $request = $this->getStatReportStatusRequest($report_id);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'getStatReportStatus'
     *
     * @param  int $report_id Report ID. The ID can be retrieved via the **exportStatReport** method (required)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function getStatReportStatusRequest($report_id)
    {
        // verify the required parameter 'report_id' is set
        if ($report_id === null || (is_array($report_id) && count($report_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_id when calling getStatReportStatus'
            );
        }

        $resourcePath = '/attempt/getStatReportStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($report_id !== null) {
            $queryParams['report_id'] = ObjectSerializer::toQueryValue($report_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\GetStatReportStatusResponseType');
        return $request;
    }
    /**
     * Operation initCampaign
     *
     * @param  string $title title (required)
     * @param  int $max_attempts max_attempts (required)
     * @param  int $interval interval (required)
     * @param  int $max_lines max_lines (required)
     * @param  int $scenario_id scenario_id (required)
     * @param  int $phone_number_id phone_number_id (required)
     * @param  int $caller_id caller_id (required)
     * @param  string $time_start time_start (required)
     * @param  string $time_end time_end (required)
     * @param  string $date_start date_start (required)
     * @param  string $date_end date_end (required)
     * @param  bool $permanent permanent (required)
     * @param  string $description description (required)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\InitCampaignResponseType
     */
    public function initCampaign($title, $max_attempts, $interval, $max_lines, $scenario_id, $phone_number_id, $caller_id, $time_start, $time_end, $date_start, $date_end, $permanent, $description)
    {
        $request = $this->initCampaignRequest($title, $max_attempts, $interval, $max_lines, $scenario_id, $phone_number_id, $caller_id, $time_start, $time_end, $date_start, $date_end, $permanent, $description);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation initCampaignAsync
     *
     * 
     *
     * @param  string $title (required)
     * @param  int $max_attempts (required)
     * @param  int $interval (required)
     * @param  int $max_lines (required)
     * @param  int $scenario_id (required)
     * @param  int $phone_number_id (required)
     * @param  int $caller_id (required)
     * @param  string $time_start (required)
     * @param  string $time_end (required)
     * @param  string $date_start (required)
     * @param  string $date_end (required)
     * @param  bool $permanent (required)
     * @param  string $description (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function initCampaignAsync($title, $max_attempts, $interval, $max_lines, $scenario_id, $phone_number_id, $caller_id, $time_start, $time_end, $date_start, $date_end, $permanent, $description)
    {
        $request = $this->initCampaignRequest($title, $max_attempts, $interval, $max_lines, $scenario_id, $phone_number_id, $caller_id, $time_start, $time_end, $date_start, $date_end, $permanent, $description);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'initCampaign'
     *
     * @param  string $title (required)
     * @param  int $max_attempts (required)
     * @param  int $interval (required)
     * @param  int $max_lines (required)
     * @param  int $scenario_id (required)
     * @param  int $phone_number_id (required)
     * @param  int $caller_id (required)
     * @param  string $time_start (required)
     * @param  string $time_end (required)
     * @param  string $date_start (required)
     * @param  string $date_end (required)
     * @param  bool $permanent (required)
     * @param  string $description (required)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function initCampaignRequest($title, $max_attempts, $interval, $max_lines, $scenario_id, $phone_number_id, $caller_id, $time_start, $time_end, $date_start, $date_end, $permanent, $description)
    {
        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling initCampaign'
            );
        }
        // verify the required parameter 'max_attempts' is set
        if ($max_attempts === null || (is_array($max_attempts) && count($max_attempts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max_attempts when calling initCampaign'
            );
        }
        // verify the required parameter 'interval' is set
        if ($interval === null || (is_array($interval) && count($interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interval when calling initCampaign'
            );
        }
        // verify the required parameter 'max_lines' is set
        if ($max_lines === null || (is_array($max_lines) && count($max_lines) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max_lines when calling initCampaign'
            );
        }
        // verify the required parameter 'scenario_id' is set
        if ($scenario_id === null || (is_array($scenario_id) && count($scenario_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scenario_id when calling initCampaign'
            );
        }
        // verify the required parameter 'phone_number_id' is set
        if ($phone_number_id === null || (is_array($phone_number_id) && count($phone_number_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number_id when calling initCampaign'
            );
        }
        // verify the required parameter 'caller_id' is set
        if ($caller_id === null || (is_array($caller_id) && count($caller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $caller_id when calling initCampaign'
            );
        }
        // verify the required parameter 'time_start' is set
        if ($time_start === null || (is_array($time_start) && count($time_start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_start when calling initCampaign'
            );
        }
        // verify the required parameter 'time_end' is set
        if ($time_end === null || (is_array($time_end) && count($time_end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_end when calling initCampaign'
            );
        }
        // verify the required parameter 'date_start' is set
        if ($date_start === null || (is_array($date_start) && count($date_start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_start when calling initCampaign'
            );
        }
        // verify the required parameter 'date_end' is set
        if ($date_end === null || (is_array($date_end) && count($date_end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_end when calling initCampaign'
            );
        }
        // verify the required parameter 'permanent' is set
        if ($permanent === null || (is_array($permanent) && count($permanent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permanent when calling initCampaign'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling initCampaign'
            );
        }

        $resourcePath = '/outbound/initCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($max_attempts !== null) {
            $formParams['max_attempts'] = ObjectSerializer::toFormValue($max_attempts);
        }
        // form params
        if ($interval !== null) {
            $formParams['interval'] = ObjectSerializer::toFormValue($interval);
        }
        // form params
        if ($max_lines !== null) {
            $formParams['max_lines'] = ObjectSerializer::toFormValue($max_lines);
        }
        // form params
        if ($scenario_id !== null) {
            $formParams['scenario_id'] = ObjectSerializer::toFormValue($scenario_id);
        }
        // form params
        if ($phone_number_id !== null) {
            $formParams['phone_number_id'] = ObjectSerializer::toFormValue($phone_number_id);
        }
        // form params
        if ($caller_id !== null) {
            $formParams['caller_id'] = ObjectSerializer::toFormValue($caller_id);
        }
        // form params
        if ($time_start !== null) {
            $formParams['time_start'] = ObjectSerializer::toFormValue($time_start);
        }
        // form params
        if ($time_end !== null) {
            $formParams['time_end'] = ObjectSerializer::toFormValue($time_end);
        }
        // form params
        if ($date_start !== null) {
            $formParams['date_start'] = ObjectSerializer::toFormValue($date_start);
        }
        // form params
        if ($date_end !== null) {
            $formParams['date_end'] = ObjectSerializer::toFormValue($date_end);
        }
        // form params
        if ($permanent !== null) {
            $formParams['permanent'] = ObjectSerializer::toFormValue($permanent);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\InitCampaignResponseType');
        return $request;
    }
    /**
     * Operation pauseCampaign
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\PauseCampaignResponseType
     */
    public function pauseCampaign($id = null)
    {
        $request = $this->pauseCampaignRequest($id);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation pauseCampaignAsync
     *
     * 
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pauseCampaignAsync($id = null)
    {
        $request = $this->pauseCampaignRequest($id);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'pauseCampaign'
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function pauseCampaignRequest($id = null)
    {

        $resourcePath = '/outbound/pauseCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\PauseCampaignResponseType');
        return $request;
    }
    /**
     * Operation resumeCampaign
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\ResumeCampaignResponseType
     */
    public function resumeCampaign($id = null)
    {
        $request = $this->resumeCampaignRequest($id);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation resumeCampaignAsync
     *
     * 
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resumeCampaignAsync($id = null)
    {
        $request = $this->resumeCampaignRequest($id);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'resumeCampaign'
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function resumeCampaignRequest($id = null)
    {

        $resourcePath = '/outbound/resumeCampaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\ResumeCampaignResponseType');
        return $request;
    }
    /**
     * Operation searchAttempts
     *
     * @param  int $id Attempt ID. The ID can be retrieved via the **searchAttempts** method (optional)
     * @param  int $campaign_id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     * @param  string $datetime_start Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $datetime_end End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $fields List of the returned fields (comma separated). If it’s not specified, the response will contain the full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\SearchAttemptsResponseType
     */
    public function searchAttempts($id = null, $campaign_id = null, $datetime_start = null, $datetime_end = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        $request = $this->searchAttemptsRequest($id, $campaign_id, $datetime_start, $datetime_end, $fields, $sort, $page, $per_page);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation searchAttemptsAsync
     *
     * 
     *
     * @param  int $id Attempt ID. The ID can be retrieved via the **searchAttempts** method (optional)
     * @param  int $campaign_id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     * @param  string $datetime_start Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $datetime_end End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $fields List of the returned fields (comma separated). If it’s not specified, the response will contain the full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAttemptsAsync($id = null, $campaign_id = null, $datetime_start = null, $datetime_end = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        $request = $this->searchAttemptsRequest($id, $campaign_id, $datetime_start, $datetime_end, $fields, $sort, $page, $per_page);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'searchAttempts'
     *
     * @param  int $id Attempt ID. The ID can be retrieved via the **searchAttempts** method (optional)
     * @param  int $campaign_id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     * @param  string $datetime_start Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $datetime_end End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $fields List of the returned fields (comma separated). If it’s not specified, the response will contain the full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-id’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function searchAttemptsRequest($id = null, $campaign_id = null, $datetime_start = null, $datetime_end = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {

        $resourcePath = '/attempt/searchAttempts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($datetime_start !== null) {
            $queryParams['datetime_start'] = ObjectSerializer::toQueryValue($datetime_start);
        }
        // query params
        if ($datetime_end !== null) {
            $queryParams['datetime_end'] = ObjectSerializer::toQueryValue($datetime_end);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per-page'] = ObjectSerializer::toQueryValue($per_page);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'GET',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\SearchAttemptsResponseType');
        return $request;
    }
    /**
     * Operation searchCampaigns
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     * @param  string $status Campaign status. The possible values are draft, error, processing, ready, canceled, completed, paused, started (optional)
     * @param  string $date_start Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $date_end End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $date_create Date of the campaign creation. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $title Title of the campaign (optional)
     * @param  string $fields List of the return fields (comma separated). If it’s not specified the response will contain the full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-datetime_start’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\SearchCampaignsResponseType
     */
    public function searchCampaigns($id = null, $status = null, $date_start = null, $date_end = null, $date_create = null, $title = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        $request = $this->searchCampaignsRequest($id, $status, $date_start, $date_end, $date_create, $title, $fields, $sort, $page, $per_page);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation searchCampaignsAsync
     *
     * 
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     * @param  string $status Campaign status. The possible values are draft, error, processing, ready, canceled, completed, paused, started (optional)
     * @param  string $date_start Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $date_end End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $date_create Date of the campaign creation. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $title Title of the campaign (optional)
     * @param  string $fields List of the return fields (comma separated). If it’s not specified the response will contain the full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-datetime_start’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCampaignsAsync($id = null, $status = null, $date_start = null, $date_end = null, $date_create = null, $title = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {
        $request = $this->searchCampaignsRequest($id, $status, $date_start, $date_end, $date_create, $title, $fields, $sort, $page, $per_page);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'searchCampaigns'
     *
     * @param  int $id Campaign ID. The ID can be retrieved via the **searchCampaigns** method (optional)
     * @param  string $status Campaign status. The possible values are draft, error, processing, ready, canceled, completed, paused, started (optional)
     * @param  string $date_start Start date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $date_end End date. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $date_create Date of the campaign creation. The format is 24-h ‘YYYY-MM-DD HH:mm:ss’ (optional)
     * @param  string $title Title of the campaign (optional)
     * @param  string $fields List of the return fields (comma separated). If it’s not specified the response will contain the full list of fields. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  string $sort Sorting data by field(s), add &#39;-&#39; to DESC sort, (&lt;b&gt;example:&lt;/b&gt; ‘sort&#x3D;id’ or ‘sort&#x3D;-datetime_start’). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $page Page to show as a response: the first one, second, etc. API methods return 20 records (one page) by default. &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     * @param  int $per_page Number of records per page (default value is 20, min &#x3D; 1, max &#x3D; 50). &lt;br /&gt;&lt;b&gt;IMPORTANT: the parameter can be used only in GET requests&lt;/b&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function searchCampaignsRequest($id = null, $status = null, $date_start = null, $date_end = null, $date_create = null, $title = null, $fields = null, $sort = null, $page = null, $per_page = null)
    {

        $resourcePath = '/outbound/searchCampaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start);
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end);
        }
        // query params
        if ($date_create !== null) {
            $queryParams['date_create'] = ObjectSerializer::toQueryValue($date_create);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per-page'] = ObjectSerializer::toQueryValue($per_page);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'GET',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\SearchCampaignsResponseType');
        return $request;
    }
    /**
     * Operation stat
     *
     * @param  string $campaign_ids campaign_ids (required)
     *
     * @throws \VoximplantKit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VoximplantKit\Model\CampaignStatResponseType
     */
    public function stat($campaign_ids)
    {
        $request = $this->statRequest($campaign_ids);
        list($response) = $this->client->sync($request);
        return $response;
    }

    /**
     * Operation statAsync
     *
     * 
     *
     * @param  string $campaign_ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function statAsync($campaign_ids)
    {
        $request = $this->statRequest($campaign_ids);
        return $this->client->async($request)->then(
               function ($response) {
               	return $response[0];
               }
        );
    }

    /**
     * Create request for operation 'stat'
     *
     * @param  string $campaign_ids (required)
     *
     * @throws \InvalidArgumentException
     * @return VoximplantKitRequest
     */
    protected function statRequest($campaign_ids)
    {
        // verify the required parameter 'campaign_ids' is set
        if ($campaign_ids === null || (is_array($campaign_ids) && count($campaign_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_ids when calling stat'
            );
        }

        $resourcePath = '/outbound/stat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($campaign_ids !== null) {
            $formParams['campaign_ids'] = ObjectSerializer::toFormValue($campaign_ids);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->client->getHeaderSelector()->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->client->getHeaderSelector()->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->client->getConfig()->getApiKeyWithPrefix('domain');
        if ($apiKey !== null) {
            $queryParams['domain'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->client->getConfig()->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->client->getConfig()->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $request = new VoximplantKitRequest(
            'POST',
            $this->client->getConfig()->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        $request->setResponseType('\VoximplantKit\Model\CampaignStatResponseType');
        return $request;
    }
}
